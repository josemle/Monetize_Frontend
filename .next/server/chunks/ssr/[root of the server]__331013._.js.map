{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file://D%3A/Ref/Programming/Practise/5/partner/src/pages/index.js"],"sourcesContent":["import Web3 from 'web3'\r\nimport { useEffect, useRef, useState } from 'react'\r\n\r\nimport Contract from '../contract/Contract'\r\n\r\nfunction MainButton({ onClick, disabled, label }) {\r\n    return (\r\n        <button\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n            className={`inline-flex rounded-md shadow disabled:opacity-50`}\r\n        >\r\n            <span\r\n                className={`inline-flex items-center justify-center px-5 py-3 border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700`}\r\n            >\r\n                {label}\r\n            </span>\r\n        </button>\r\n    )\r\n}\r\n\r\nfunction AddressInput({ id, label, value, onChange, onBlur, error }) {\r\n    return (\r\n        <div className=\"flex flex-col\">\r\n            <label htmlFor={`address-${id}`}>{label}</label>\r\n            <input\r\n                id={`address-${id}`}\r\n                value={value}\r\n                type=\"text\"\r\n                onChange={(event) => onChange(event.target.value)}\r\n                onBlur={(event) => onBlur(event.target.value)}\r\n                className={'form-input rounded px-4 py-3'}\r\n                placeholder=\"Wallet Address\"\r\n            />\r\n            {error ? (\r\n                <p className=\"text-red-600 text-sm\">{error}</p>\r\n            ) : (\r\n                <p className=\"text-sm\">&nbsp;</p>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction SplitInput({ id, value, onChange }) {\r\n    return (\r\n        <div className=\"flex flex-col\">\r\n            <label htmlFor={`split-${id}`}>Split</label>\r\n            <input\r\n                id={`split-${id}`}\r\n                value={value}\r\n                type=\"number\"\r\n                onChange={(event) => onChange(Number(event.target.value))}\r\n                className={'form-input rounded px-4 py-3'}\r\n                placeholder={1}\r\n                min={1}\r\n                step={1}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction PartnerInput({ address, split }) {\r\n    return (\r\n        <div className={'flex'}>\r\n            <div className={'mr-3 w-full'}>\r\n                <AddressInput\r\n                    id={address.id}\r\n                    label={address.label}\r\n                    value={address.value}\r\n                    onChange={address.onChange}\r\n                    onBlur={address.onBlur}\r\n                    error={address.error}\r\n                />\r\n            </div>\r\n            <div className={'w-1/5'}>\r\n                <SplitInput\r\n                    id={split.id}\r\n                    value={split.value}\r\n                    onChange={split.onChange}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function Home() {\r\n    const web3 = useRef(null)\r\n\r\n    const [deployedContractAddress, setDeployedContractAddress] = useState('')\r\n    const [isDeploying, setIsDeploying] = useState(false)\r\n    const [currentAccount, setCurrentAccount] = useState(null)\r\n    const [hasWalletWarning, setHasWalletWarning] = useState(false)\r\n    const [partners, setPartners] = useState([\r\n        {\r\n            id: '1',\r\n            label: 'Partner A',\r\n            address: '',\r\n            error: '',\r\n            split: 1,\r\n        },\r\n        {\r\n            id: '2',\r\n            label: 'Partner B',\r\n            address: '',\r\n            error: '',\r\n            split: 1,\r\n        },\r\n    ])\r\n\r\n    const checkIfWalletIsConnected = () => {\r\n        return Boolean(window.ethereum)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const hasWallet = checkIfWalletIsConnected()\r\n        setHasWalletWarning(!hasWallet)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (web3.current) {\r\n            return\r\n        }\r\n\r\n        if (!checkIfWalletIsConnected()) {\r\n            return\r\n        }\r\n\r\n        web3.current = new Web3(window.ethereum)\r\n        web3.current.eth.getBlock('latest').then((block) => console.log(block))\r\n    }, [])\r\n\r\n    const connectWallet = async () => {\r\n        if (!checkIfWalletIsConnected()) {\r\n            return\r\n        }\r\n\r\n        try {\r\n            const { ethereum } = window\r\n\r\n            const accounts = await ethereum.request({\r\n                method: 'eth_requestAccounts',\r\n            })\r\n\r\n            console.log('Connected', accounts[0])\r\n            setCurrentAccount(accounts[0])\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    const handleStartPartnership = async () => {\r\n        const addresses = [partners[0].address, partners[1].address]\r\n        const splitRatio = [partners[0].split, partners[1].split]\r\n        const contractArguments = [addresses, splitRatio]\r\n\r\n        const { abi, bytecode } = Contract\r\n        const contract = new web3.current.eth.Contract(abi)\r\n\r\n        const contractDeploymentData = {\r\n            data: bytecode,\r\n            arguments: contractArguments,\r\n        }\r\n\r\n        const gas = await contract.deploy(contractDeploymentData).estimateGas()\r\n\r\n        setIsDeploying(true)\r\n\r\n        contract\r\n            .deploy(contractDeploymentData)\r\n            .send({\r\n                from: currentAccount,\r\n                gas: 5000000, // Gas limit\r\n                gasPrice: web3.current.utils.toWei('10', 'gwei'), // Legacy gas price in gwei\r\n            })\r\n            .on('error', (error) => {\r\n                console.log(error)\r\n                setIsDeploying(false)\r\n            })\r\n            .on('receipt', (receipt) => {\r\n                // receipt will contain deployed contract address\r\n                console.log(receipt)\r\n\r\n                setIsDeploying(false)\r\n                setDeployedContractAddress(receipt.contractAddress)\r\n            })\r\n            .on('confirmation', (_confirmationNumber, receipt) => {\r\n                console.log(receipt)\r\n                setIsDeploying(false)\r\n            })\r\n    }\r\n\r\n    const addressInputs = partners.map((partner, index) => {\r\n        return (\r\n            <PartnerInput\r\n                address={{\r\n                    id: partner.id,\r\n                    label: partner.label,\r\n                    value: partner.address,\r\n                    onChange: (value) => {\r\n                        setPartners((oldPartnersState) => {\r\n                            const newPartnersState = [...oldPartnersState]\r\n                            newPartnersState[index].address = value\r\n\r\n                            return newPartnersState\r\n                        })\r\n                    },\r\n                    onBlur: (value) => {\r\n                        setPartners((oldPartnersState) => {\r\n                            const isValueAddress = web3.current.utils.isAddress(value)\r\n                            const newPartnersState = [...oldPartnersState]\r\n                            newPartnersState[index].error = isValueAddress\r\n                                ? ''\r\n                                : 'Enter a valid wallet address'\r\n\r\n                            return newPartnersState\r\n                        })\r\n                    },\r\n                    error: partner.error,\r\n                }}\r\n                split={{\r\n                    id: partner.id,\r\n                    value: partner.split,\r\n                    onChange: (value) => {\r\n                        setPartners((oldPartnersState) => {\r\n                            const newPartnersState = [...oldPartnersState]\r\n                            newPartnersState[index].split = value\r\n\r\n                            return newPartnersState\r\n                        })\r\n                    },\r\n                }}\r\n                key={partner.label}\r\n            />\r\n        )\r\n    })\r\n\r\n    const hasErrors = partners.some((partner) => Boolean(partner.error))\r\n    const hasEmptyValues = partners.some((partner) => !Boolean(partner.address))\r\n\r\n    const handleConfirm = () => {\r\n        setDeployedContractAddress('')\r\n    }\r\n\r\n    if (deployedContractAddress) {\r\n        return (\r\n            <div className=\"flex flex-col min-h-screen\">\r\n                <main className=\"flex flex-1 flex-col items-center justify-start py-8 pt-12 px-6 md:pt-20 text-zinc-700\">\r\n                    <h1 className=\"text-5xl md:text-6xl font-extrabold mb-3 pb-2 text-indigo-600\">\r\n                        Congratulations!\r\n                    </h1>\r\n\r\n                    <section className=\"max-w-md text-center mb-12\">\r\n                        <p className=\"text-sm mb-6\">\r\n                            Your contract is now deployed at this address. <br />\r\n                            <span className=\"font-bold\">You should write it down.</span>\r\n                        </p>\r\n                        <p className=\"font-bold mb-6 text-sm border-dashed border-2 p-1 border-slate-600\">\r\n                            {deployedContractAddress}\r\n                        </p>\r\n                        <p className=\"text-sm\">\r\n                            Any payment made to this address will be split in between you and\r\n                            your partner when withdrawn.\r\n                        </p>\r\n                        <div className=\"p-4 flex flex-col justify-center items-center\">\r\n                            <MainButton\r\n                                label={'I wrote down the address'}\r\n                                onClick={handleConfirm}\r\n                            />\r\n                        </div>\r\n                    </section>\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"flex flex-col min-h-screen\">\r\n            <main className=\"flex flex-1 flex-col items-center justify-start py-8 pt-12 px-6 md:pt-20 text-zinc-700\">\r\n                <h1 className=\"text-7xl md:text-6xl font-extrabold text-indigo-600 mb-3 pb-2\">\r\n                    Partnerly\r\n                </h1>\r\n                <section className=\"max-w-md text-center mb-12\">\r\n                    <p className=\"text-xl\">\r\n                        Partnerly creates a smart contract for you and your partner that\r\n                        distributes the payments to the partnership contract in a\r\n                        predetermined split ratio.\r\n                    </p>\r\n                    {hasWalletWarning && (\r\n                        <p className=\"mt-4 text-red-600\">\r\n                            You will need Metamask or equivalent to use this app.\r\n                        </p>\r\n                    )}\r\n                    {!currentAccount && (\r\n                        <div className=\"mt-4\">\r\n                            <MainButton onClick={connectWallet} label={'Connect Wallet'} />\r\n                        </div>\r\n                    )}\r\n                </section>\r\n\r\n                {currentAccount && (\r\n                    <div className=\"grid grid-cols-1 gap-3 mb-6\">{addressInputs}</div>\r\n                )}\r\n\r\n                {currentAccount && (\r\n                    <div className=\"flex flex-col justify-center items-center p-3\">\r\n                        <div>\r\n                            <MainButton\r\n                                onClick={handleStartPartnership}\r\n                                disabled={hasErrors || hasEmptyValues || isDeploying}\r\n                                label={isDeploying ? 'Deploying' : 'Partner Up!'}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </main>\r\n        </div>\r\n    )\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 557, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}